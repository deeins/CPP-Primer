// chapter2.3_compound_type.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//引用与指针

#include <iostream>
using namespace std;
int main()
{
    //1.引用
    int ival = 1024;
    int& ref_val = ival;
    //引用必须初始化
    //int& ref_val2;
    //引用是对已有的变量起一个别名，且初始化绑定一个对象后，无法重新绑定其他对象
    //可以用已有引用初始化新的引用
    //！！！引用除了两种例外，都需要左右两边类型严格匹配
    int& ref_val3 = ref_val;
    //int& ref_val4 = 10;//引用类型的初始值不能是字面值，必须是一个对象
    //double &ref_val5 = ival;//！！！引用左右两边的类型不一致时会进行类似常量引用的操作，为变量绑定一个临时量，因而达不到引用原始值的目的，所以被C++判断为非法
    double ival2 = 1023;
    //int& ref_val6 = ival2;//！！！引用左右两边的类型不一致时会进行类似常量引用的操作，为变量绑定一个临时量，因而达不到引用原始值的目的，所以被C++判断为非法
    ref_val3 = ival2;//并没有重新绑定ref_val3引用，而是将ref_val3指向的对象的值修改了
    cout << "ival=" << ival << ",ival2=" << ival2 << endl;

    //2.指针，存放某个对象的地址
    // 指针与引用的区别：
    //  指针首先可以为空，但引用不行；
    //  其次，指针还能更换指向对象，引用自初始化后就不能重新绑定了；
    //  指针本身就是一个独立的对象，引用只是一个别名；
    //  指针可以不初始化，但引用必须初始化
    // 指针在块作用域定义时，同样会有一个随机值
    // 指针会用到&（取地址符），*（解引用符）
    //
    int* p = &ref_val;//指向的不是引用，而是引用对应的对象，引用不是对象，没有实际地址，所以说指向引用是错误的说法

    //&*既能作为声明的一部分出现，也能用作表达式里的运算符
    int& r = ival;//作为声明的一部分
    *p = r;//修改指向对象的值，*作为表达式里的运算符
    p = &r;//更换指向对象，&作为表达式里的运算符

    //空指针
    // 空指针不指向任何对象
    // 尽量使用nullptr创建，避免使用NULL
    //
    int* q = nullptr;//创建空指针,C++11引入的一种方法
    char* q2 = 0;//创建空指针,此处不能用为0的变量创建空指针
    int* q3 = NULL;//书上说需要引入#include <cstdlib>，但没引入似乎没报错，也是创建空指针的方法，
    //NULL是预处理变量，在cstdlib头文件中定义，值为0
    //cout << "nullptr=" << nullptr << endl;//nullptr不能直接输出
    cout << "指针q=" << q << endl;//输出17个0
    //if(q)//判断指针是否为空
    //if(*q)//判断指针指向值是否为0
    
    //void*指针
    // void*类型指针可以指向任意类型的对象
    // 可以用于与别的指针比较、作为函数的输出和输出，或赋值给另一个void*指针
    // 这种指针不能访问内存空间所存的对象，因为不清楚指向的类型，进行修改不清楚应该做哪些操作
    // 无法判断是否是无效指针
    // 后续会进行详细介绍
    //
    double obj = 3.14, * pd = &obj;
    void* pv = &obj;//void*指针可以存放任意类型对象的地址
    pv = pd;//void*指针可以存放任意类型的指针

    //2.3.3理解复合类型的声明
    // 类型修饰符&*在声明时只对一个变量有效，并不会对连续的多个变量生效
    //
    int* po=&ival, po2;//po是int型指针，但po2是整型数据
    //指向指针的指针
    int** po3 = &po;//po3是指向指针的指针，需要两次解引用才能取到ival的值
    //指向指针的引用
    int*& r = po;
    //不允许指向引用的指针
    //int&* rr = r;
    //总结来说里变量名最近的符号（&*等）对变量有最直接的影响，比如r是引用
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
