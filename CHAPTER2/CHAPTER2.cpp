// CHAPTER2.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//初始化非常重要，一定要记得在创建内置类型变量的时候初始化

#include <iostream>
using namespace std;

double c;
char d = 0;
int main()
{
    float i = 1E-2F;
    wchar_t j = 'j';
    //wchar_t类型的字符默认输出一个八进制数，不会输出字符
    cout << i << ' ' << j << endl;
    cout << L'k' << endl;
    //浮点数默认字面值是double
    cout << typeid(3.14).name() << endl;
    //使用花括号初始化变量，编译时会检验是否有信息丢失的风险，
    //若存在丢失风险，则报错
    int k{ 10 };
    int L = { 11 };
    //以下两行语句会编译报错
    double a = 1.12445643;
    //int b{ a };
 
    // 定义于函数体内部的内置类型变量将 不被初始化
    //int c;//一个未被初始化的内置类型变量的值是未定义的，这时输出、拷贝或是其他方式访问它，会报错
    //定义于任何函数体外的变量初始化默认为0，0会转换为对应类型的表示形式
    cout << "c=" << c << endl;
    cout << "d=" << d << endl;
    //类可以不用初始化，系统会赋予默认值，比如string类型会赋予变量空串
    string str;
    cout << "str=" << str << endl;
    if (str == "\0")cout << "str=\"\\0\"" << endl;//此句会输出
    //使用==时要左右类型匹配，下列string==char的写法会报错
    //if (str=='\0')

    //错误写法，不允许在访问时创建变量
    //cin >> int t;
    //不允许连续创建变量，会报错未定义标识符
    //double salary = wage = 9999.99;
    //但可以先创建，再在另一个变量初始化时连续初始化
    double wage;
    double salary = wage = 9999.99;
    cout << "salary=" << salary << ',' << "wage=" << wage << endl;
    int s = 3.14;//不安全类型转换，有丢失数据的风险，会警告

    //外部变量  2.4节对extern进行了一些特性探索
    //extern用于声明但不定义变量，去掉extern是既会声明也会定义
    extern double pi;
    //extern使用时能赋初始值，但这样就抵消了extern的作用(书上说是如此，但vs会报错 后期补充：报错原因是不允许对外部变量的局部声明使用初始值设定项）
    extern double pii = 3.14;
    // 定义 负责创建与名字关联的实体
    // 声明 使得名字为程序所知，一个文件如果想使用别处定义的名字，则必须包含对那个名字的声明
    //extern的意义在于多个文件使用同一个文件的一组变量时，有时会取不同的值，这时候只能在文件中声明但不定义变量，等其他文件使用时再定义
    //类似乎默认自己的属性是extern的，使用extern关键词会报错
    extern int p;//声明
    int pp;//声明并定义
    pp = 1;
    //extern int ppp = 12;//只定义，这种写法在函数内部会报错，只定义则不能在外部文件使用

    //标识符
    //不能连续出现两个下划线
    //不能以下划线接大写字母开头
    //函数体外的标识符不能以下划线开头
    // 
    //变量命名规范
    //  标识符要能体现实际含义
    //  变量名一般用小写字母，如index，不要使用Index或INDEX
    //  用户自定义类名一般以大写字母开头，如Sale_item
    //  如果标识符由多个单词组成，则单词间应该有明显的区分，如student_laon或studentLoan，不要使用studentloan
    //  全局变量加前缀g_，静态变量加前缀s_，类的数据成员加前缀m_
    //  常量全部大写，如CONST
    //  为了防止某一软件库中的一些标识符和其它软件库中的冲突，可以为各种标识符加上能反映软件性质的前缀
    //  
    //  尽量使用蛇形法命名，因为驼峰法命名会将单词首字母大写，这时如果要搜索某个关键词就不清楚在语句中是大写开头还是小写开头

    int ii = 1, jj = ++ii + (++ii);
    cout << jj << endl;
    int _=1;

    //局部变量与全局变量同名，局部变量会在对应作用域内覆盖全局变量，此时通过“::全局变量名”来访问全局变量，否则默认访问局部变量
    //如果函数要使用全局变量，则函数内不建议再定义一个同名的局部变量
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
